# /etc/conf.d/phc-k8: config file for /etc/init.d/phc-k8

# AMD-specific voltage IDs (vids) to be applied to all available CPUs, typically
# for CPU undervolting. Defaults to the empty string. (Hence, no CPU will be
# revolted until you change this and restart the corresponding initscript.)
#
# Do *NOT* change this default until rigorously testing the long-term
# stability of your system under the desired vids. Consider following the
# following approach, assuming a single-CPU setup; after rebooting into a
# kernel patched with "phc-k8", run as root:
#
# 1. Change the current directory, for convenience:
#    $ /sys/devices/system/cpu/cpu0/cpufreq
# 2. Print the default fids (frequency IDs) for your CPU:
#    $ echo phc_default_fids
#    10 2
# 3. Print the default vids (voltage IDs) for your CPU:
#    $ echo phc_default_vids
#    22 30
# 4. Switch to the "userspace" CPU governor:
#    $ echo "userspace" > scaling_governor
# 5. Temporarily switch your CPU to the first supported frequency, found by
#    plugging the first fid printed above into a formula specific to your CPU
#    make. In the author's case, this is 800+(100*fid)=800+(100*10)=1800MHz,
#    giving a frequency of 1.8GHz. See "/usr/share/doc/phc-k8-"* for details:
#    $ echo 1800000 > scaling_setspeed
# 6. Temporarily revolt your CPU by increasing the vid for the first supported
#    frequency by exactly 1 (or 2 at the most, if you're feeling lucky tonight).
#    In the author's case, this is a vid of 22+1=23, implying a fairly mild but
#    occasionally fatal voltage drop of 25mV. Since we can only test one vid
#    change at a time, do *NOT* change the vid for any other frequency:
#    $ echo "23 30" > phc_vids
# 7. Run a torture test (e.g., "mprime", "cpuburn"):
#    $ mprime &
# 8. Monitor heat while running such test (e.g., "sensors"):
#    $ sensors
# 9. If system sensors show motherboard or CPU heat to exceed sane thresholds,
#    kill such test:
#    $ killall -9 mprime
# 10. If such test runs stably for at least 12 to 24 hours, this revolting is
#     stable. In this case, return to step 6, increasing the same vid again by
#     exactly 1.
# 11. Repeat until such test either crashes the system or reports a failure. In
#     this case, decrease the current vid by exactly 1. The resulting number is
#     the highest stable vid (i.e., lowest stable undervolting) for your CPU at
#     this frequency.
# 12. Continue to the next supported frequency by returning to step 5.
# 13. Repeat until identifying the highest stable vid for your CPU at *ALL*
#     supported frequencies. While this may take several days, it's almost
#     always worth it -- especially for those suffering heat issues at higher
#     CPU voltages.
# 14. Print the highest stable vids for your CPU:
#     $ cat phc_vids
#     26 32
# 15. Set this variable to the highest stable vids (in the same order):
#     PHC_K8_VIDS="26 32"
#
# See "/usr/share/doc/phc-k8-"* for further details.
PHC_K8_VIDS=""
